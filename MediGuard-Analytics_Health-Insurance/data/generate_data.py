#!/usr/bin/env python3
"""
Generate synthetic health insurance claims data for fraud detection analysis.
SYNTHETIC DATA - Generated by AI for demonstration purposes only. Not real data.
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random
import string
import os

# Set random seed for reproducibility
np.random.seed(42)
random.seed(42)

def generate_member_ids(n):
    """Generate unique member IDs"""
    return [f"MEM{str(i).zfill(8)}" for i in range(1, n+1)]

def generate_provider_ids(n):
    """Generate unique provider IDs"""
    return [f"PRV{str(i).zfill(6)}" for i in range(1, n+1)]

def generate_diagnosis_codes():
    """Generate common diagnosis codes (ICD-10 style)"""
    codes = []
    # Common conditions
    prefixes = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O']
    for prefix in prefixes[:10]:
        for i in range(10, 100, 5):
            codes.append(f"{prefix}{i}.{random.randint(0,9)}")
    return codes

def generate_procedure_codes():
    """Generate procedure codes (CPT style)"""
    # Common procedure code ranges
    ranges = [
        (99201, 99215),  # Office visits
        (80000, 89999),  # Laboratory
        (90000, 99199),  # Medicine
        (70000, 79999),  # Radiology
        (10000, 69999),  # Surgery
    ]
    codes = []
    for start, end in ranges:
        for _ in range(20):
            codes.append(str(random.randint(start, end)))
    return codes

def generate_claims_data(n_claims=10000):
    """Generate synthetic claims data with fraud indicators"""
    
    # Generate base entities
    n_members = n_claims // 5
    n_providers = n_claims // 20
    
    member_ids = generate_member_ids(n_members)
    provider_ids = generate_provider_ids(n_providers)
    diagnosis_codes = generate_diagnosis_codes()
    procedure_codes = generate_procedure_codes()
    
    # Provider specialties
    specialties = [
        'General Practice', 'Internal Medicine', 'Cardiology', 'Orthopedics',
        'Emergency Medicine', 'Radiology', 'Laboratory', 'Surgery',
        'Pediatrics', 'Obstetrics', 'Psychiatry', 'Dermatology',
        'Ophthalmology', 'Neurology', 'Oncology'
    ]
    
    # Create provider characteristics
    provider_df = pd.DataFrame({
        'provider_id': provider_ids,
        'specialty': np.random.choice(specialties, n_providers),
        'years_in_practice': np.random.randint(1, 35, n_providers),
        'region': np.random.choice(['North', 'South', 'East', 'West', 'Central'], n_providers),
        'provider_type': np.random.choice(['Hospital', 'Clinic', 'Private Practice', 'Urgent Care'], n_providers, p=[0.3, 0.3, 0.3, 0.1])
    })
    
    # Mark some providers as potentially fraudulent
    fraud_providers = np.random.choice(provider_ids, size=int(n_providers * 0.05), replace=False)
    
    # Generate claims
    claims = []
    start_date = datetime(2023, 1, 1)
    
    for i in range(n_claims):
        claim_id = f"CLM{str(i+1).zfill(10)}"
        member_id = np.random.choice(member_ids)
        provider_id = np.random.choice(provider_ids)
        
        # Determine if this claim is fraudulent
        is_fraud = False
        fraud_type = None
        
        # Different fraud patterns (about 5% fraud rate)
        if provider_id in fraud_providers:
            is_fraud = np.random.random() < 0.4  # Higher fraud rate for fraudulent providers
            if is_fraud:
                fraud_type = np.random.choice(['billing_excessive', 'phantom_billing', 'upcoding'])
        elif np.random.random() < 0.02:  # Random fraud from normal providers
            is_fraud = True
            fraud_type = np.random.choice(['duplicate_claim', 'identity_theft', 'service_unbundling'])
        
        # Generate claim details based on fraud status
        service_date = start_date + timedelta(days=random.randint(0, 730))
        
        # Base amounts
        if is_fraud:
            if fraud_type == 'billing_excessive':
                billed_amount = np.random.uniform(5000, 50000)
            elif fraud_type == 'upcoding':
                billed_amount = np.random.uniform(2000, 15000)
            else:
                billed_amount = np.random.uniform(1000, 10000)
        else:
            billed_amount = np.random.lognormal(5.5, 1.5)
            billed_amount = min(billed_amount, 20000)  # Cap normal claims
        
        allowed_amount = billed_amount * np.random.uniform(0.3, 0.9)
        paid_amount = allowed_amount * np.random.uniform(0.7, 1.0)
        
        # Diagnosis and procedure codes
        n_diagnosis = 1 if not is_fraud else np.random.choice([1, 2, 3, 4, 5], p=[0.2, 0.2, 0.2, 0.2, 0.2])
        n_procedures = 1 if not is_fraud else np.random.choice([1, 2, 3, 4], p=[0.3, 0.3, 0.2, 0.2])
        
        primary_diagnosis = np.random.choice(diagnosis_codes)
        primary_procedure = np.random.choice(procedure_codes)
        
        # Service patterns
        if is_fraud and fraud_type == 'phantom_billing':
            days_to_submit = np.random.randint(1, 5)  # Quick submission for phantom billing
        else:
            days_to_submit = np.random.randint(1, 90)
        
        submission_date = service_date + timedelta(days=days_to_submit)
        
        # Member age (affects claim patterns)
        member_age = np.random.normal(45, 20)
        member_age = max(0, min(member_age, 100))
        
        claim = {
            'claim_id': claim_id,
            'member_id': member_id,
            'provider_id': provider_id,
            'service_date': service_date.strftime('%Y-%m-%d'),
            'submission_date': submission_date.strftime('%Y-%m-%d'),
            'days_to_submit': days_to_submit,
            'primary_diagnosis': primary_diagnosis,
            'primary_procedure': primary_procedure,
            'num_diagnosis_codes': n_diagnosis,
            'num_procedures': n_procedures,
            'billed_amount': round(billed_amount, 2),
            'allowed_amount': round(allowed_amount, 2),
            'paid_amount': round(paid_amount, 2),
            'member_age': int(member_age),
            'claim_type': np.random.choice(['Professional', 'Institutional', 'Pharmacy', 'Dental'], p=[0.5, 0.3, 0.15, 0.05]),
            'place_of_service': np.random.choice(['Office', 'Hospital', 'Emergency', 'Home', 'Telehealth'], p=[0.4, 0.3, 0.15, 0.05, 0.1]),
            'is_fraud': is_fraud,
            'fraud_type': fraud_type if is_fraud else 'none'
        }
        
        claims.append(claim)
    
    claims_df = pd.DataFrame(claims)
    
    # Add provider information
    claims_df = claims_df.merge(provider_df, on='provider_id', how='left')
    
    # Generate member demographics
    unique_members = claims_df['member_id'].unique()
    member_df = pd.DataFrame({
        'member_id': unique_members,
        'gender': np.random.choice(['M', 'F'], len(unique_members)),
        'state': np.random.choice(['CA', 'TX', 'FL', 'NY', 'PA', 'IL', 'OH', 'GA', 'NC', 'MI'], len(unique_members)),
        'plan_type': np.random.choice(['HMO', 'PPO', 'EPO', 'POS'], len(unique_members), p=[0.4, 0.35, 0.15, 0.1]),
        'chronic_conditions': np.random.randint(0, 4, len(unique_members))
    })
    
    # Final merge
    final_df = claims_df.merge(member_df, on='member_id', how='left')
    
    # Sort by date
    final_df = final_df.sort_values('service_date')
    
    # Add header comment to indicate synthetic data
    header = "# SYNTHETIC DATA - Generated by AI for demonstration purposes only. Not real data.\n"
    
    # Save to CSV with header
    output_path = 'data/synthetic-claims.csv'
    with open(output_path, 'w') as f:
        f.write(header)
    final_df.to_csv(output_path, mode='a', index=False)
    
    print(f"Generated {len(final_df)} synthetic claims")
    print(f"Fraud rate: {final_df['is_fraud'].mean():.2%}")
    print(f"Saved to: {output_path}")
    
    # Generate aggregated provider summary
    provider_summary = final_df.groupby('provider_id').agg({
        'claim_id': 'count',
        'billed_amount': ['sum', 'mean', 'std'],
        'is_fraud': 'mean',
        'days_to_submit': 'mean',
        'specialty': 'first',
        'provider_type': 'first',
        'region': 'first'
    }).round(2)
    
    provider_summary.columns = ['_'.join(col).strip() for col in provider_summary.columns.values]
    provider_summary = provider_summary.rename(columns={'claim_id_count': 'total_claims', 'is_fraud_mean': 'fraud_rate'})
    
    # Save provider summary
    provider_output = 'data/synthetic-provider-summary.csv'
    with open(provider_output, 'w') as f:
        f.write(header)
    provider_summary.to_csv(provider_output, mode='a')
    
    print(f"Provider summary saved to: {provider_output}")
    
    # Generate member summary
    member_summary = final_df.groupby('member_id').agg({
        'claim_id': 'count',
        'billed_amount': ['sum', 'mean'],
        'is_fraud': 'sum',
        'member_age': 'first',
        'gender': 'first',
        'state': 'first',
        'plan_type': 'first',
        'chronic_conditions': 'first'
    }).round(2)
    
    member_summary.columns = ['_'.join(col).strip() for col in member_summary.columns.values]
    member_summary = member_summary.rename(columns={
        'claim_id_count': 'total_claims',
        'is_fraud_sum': 'fraud_claims',
        'member_age_first': 'age',
        'gender_first': 'gender',
        'state_first': 'state',
        'plan_type_first': 'plan_type',
        'chronic_conditions_first': 'chronic_conditions'
    })
    
    # Save member summary
    member_output = 'data/synthetic-member-summary.csv'
    with open(member_output, 'w') as f:
        f.write(header)
    member_summary.to_csv(member_output, mode='a')
    
    print(f"Member summary saved to: {member_output}")
    
    return final_df

if __name__ == "__main__":
    # Create data directory if it doesn't exist
    os.makedirs('data', exist_ok=True)
    
    # Generate the data
    df = generate_claims_data(n_claims=10000)
    
    print("\nDataset Overview:")
    print(f"Total records: {len(df)}")
    print(f"Date range: {df['service_date'].min()} to {df['service_date'].max()}")
    print(f"Unique members: {df['member_id'].nunique()}")
    print(f"Unique providers: {df['provider_id'].nunique()}")
    print(f"\nFraud breakdown:")
    print(df['fraud_type'].value_counts())